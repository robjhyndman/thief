[{"path":"http://robjhyndman.github.io/thief/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rob Hyndman. Author, maintainer, copyright holder. Nikolaos Kourentzes. Author, copyright holder.","code":""},{"path":"http://robjhyndman.github.io/thief/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hyndman RJ, Kourentzes N (2023). thief: Temporal HIErarchical Forecasting. R package version 0.3, http://pkg.robjhyndman.com/thief. Athanasopoulos, George, Hyndman, J R, Kourentzes, Nikolaos, Petropoulos, Fotios (2017). “Forecasting temporal hierarchies.” European Journal Operational Research, 262(1), 60–74.","code":"@Manual{,   title = {{thief}: Temporal HIErarchical Forecasting},   author = {Rob J Hyndman and Nikolaos Kourentzes},   year = {2023},   note = {R package version 0.3},   url = {http://pkg.robjhyndman.com/thief}, } @Article{,   title = {Forecasting with temporal hierarchies},   author = {{Athanasopoulos} and {George} and {Hyndman} and Rob J and {Kourentzes} and {Nikolaos} and {Petropoulos} and {Fotios}},   journal = {European Journal of Operational Research},   volume = {262},   number = {1},   pages = {60--74},   year = {2017}, }"},{"path":"http://robjhyndman.github.io/thief/index.html","id":"thief-temporal-hierarchical-forecasting-","dir":"","previous_headings":"","what":"Temporal Hierarchical Forecasting","title":"Temporal Hierarchical Forecasting","text":"R package thief provides methods tools generating forecasts different temporal frequencies using hierarchical time series approach. Authors: Rob J Hyndman Nikolaos Kourentzes package implements methods described Athanasopoulos, G., Hyndman, R.J., Kourentzes, N., Petropoulos, F. (2016) Forecasting temporal hierarchies.","code":""},{"path":"http://robjhyndman.github.io/thief/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Temporal Hierarchical Forecasting","text":"can install stable version R CRAN. can install development version Github","code":"install.packages('thief', dependencies = TRUE) # install.packages(\"devtools\") devtools::install_github(\"robjhyndman/thief\")"},{"path":"http://robjhyndman.github.io/thief/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Temporal Hierarchical Forecasting","text":"","code":"library(thief) thief(USAccDeaths)"},{"path":"http://robjhyndman.github.io/thief/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Temporal Hierarchical Forecasting","text":"package free open source software, licensed GPL 3.","code":""},{"path":"http://robjhyndman.github.io/thief/reference/AEdemand.html","id":null,"dir":"Reference","previous_headings":"","what":"Accident and Emergency demand in the UK — AEdemand","title":"Accident and Emergency demand in the UK — AEdemand","text":"Weekly demand Accident & Emergency departments UK,  7 November 2010 7 June 2015.","code":""},{"path":"http://robjhyndman.github.io/thief/reference/AEdemand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accident and Emergency demand in the UK — AEdemand","text":"","code":"AEdemand"},{"path":"http://robjhyndman.github.io/thief/reference/AEdemand.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Accident and Emergency demand in the UK — AEdemand","text":"object class ts.","code":""},{"path":"http://robjhyndman.github.io/thief/reference/AEdemand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accident and Emergency demand in the UK — AEdemand","text":"","code":"library(ggplot2) autoplot(AEdemand, xlab=\"Year\", ylab=\"Demand ('000)\") +   ggtitle(\"Accident & Emergency Demand in the UK\")   if (FALSE) {  # Demonstration of the adjustment of all temporal aggregates # using Total Emergency Admissions  total <- AEdemand[,12] totalagg <- tsaggregates(total) plot(totalagg, main=\"Total Emergency Admissions\")  # Base forecasts base <- list() for(i in 1:5)   base[[i]] <- forecast(auto.arima(totalagg[[i]])) base[[6]] <-  forecast(auto.arima(totalagg[[6]]), h=2)  # Reconciled forecasts reconciled <- reconcilethief(base)  main <- paste(names(totalagg),\" (k=\",            52/unlist(lapply(reconciled,frequency)),\")\",sep=\"\") par(mfrow=c(2,3)) for(i in 6:1) {   ylim <- range(base[[i]]$mean, base[[i]]$x, reconciled[[i]]$mean)   plot(base[[i]], main=main[i], fcol='white',       plot.conf=FALSE, ylim=ylim, xlim=c(2010.5,2017.5))   polygon(c(2015.45, 2020, 2020, 2015.45),           c(0, 0, 1e5, 1e5), col='grey', border=FALSE)   lines(base[[i]]$mean, col='red', lty=2)   lines(reconciled[[i]]$mean, col='blue') } }"},{"path":"http://robjhyndman.github.io/thief/reference/plot.tsaggregates.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time series aggregates — plot.tsaggregates","title":"Plot time series aggregates — plot.tsaggregates","text":"Plots temporal aggregations time series","code":""},{"path":"http://robjhyndman.github.io/thief/reference/plot.tsaggregates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time series aggregates — plot.tsaggregates","text":"","code":"# S3 method for tsaggregates plot(x, series = \"all\", ...)  # S3 method for tsaggregates autoplot(object, series = \"all\", ...)"},{"path":"http://robjhyndman.github.io/thief/reference/plot.tsaggregates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time series aggregates — plot.tsaggregates","text":"x tsaggregates object, produced tsaggregates. series indexes series plot. default, series plotted. ... arguments passed plot.ts autoplot.ts. object tsaggregates object, produced tsaggregates.","code":""},{"path":"http://robjhyndman.github.io/thief/reference/plot.tsaggregates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot time series aggregates — plot.tsaggregates","text":"Rob J Hyndman","code":""},{"path":"http://robjhyndman.github.io/thief/reference/plot.tsaggregates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot time series aggregates — plot.tsaggregates","text":"","code":"deathagg <- tsaggregates(USAccDeaths) plot(deathagg, series=c(1,2,4,6))   library(ggplot2) autoplot(deathagg)"},{"path":"http://robjhyndman.github.io/thief/reference/reconcilethief.html","id":null,"dir":"Reference","previous_headings":"","what":"Reconcile temporal hierarchical forecasts — reconcilethief","title":"Reconcile temporal hierarchical forecasts — reconcilethief","text":"Takes forecasts time series levels temporal aggregation combines using temporal hierarchical approach Athanasopoulos et al (2016).","code":""},{"path":"http://robjhyndman.github.io/thief/reference/reconcilethief.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reconcile temporal hierarchical forecasts — reconcilethief","text":"","code":"reconcilethief(forecasts, comb = c(\"struc\", \"mse\", \"ols\", \"bu\", \"shr\",   \"sam\"), mse = NULL, residuals = NULL, returnall = TRUE,   aggregatelist = NULL)"},{"path":"http://robjhyndman.github.io/thief/reference/reconcilethief.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reconcile temporal hierarchical forecasts — reconcilethief","text":"forecasts List forecasts. element must time series forecasts, forecast object. number forecasts equal k times seasonal period series, k across series. comb Combination method temporal hierarchies, taking one following values: \"struc\" Structural scaling - weights temporal hierarchy \"mse\" Variance scaling - weights -sample MSE \"ols\" Unscaled OLS combination weights \"bu\" Bottom-combination -- .e., aggregate forecasts ignored. \"shr\" GLS using shrinkage (block diagonal) estimate residuals \"sam\" GLS using sample covariance matrix residuals mse vector one-step MSE values corresponding forecast series. residuals List residuals corresponding forecast models. element must time series residuals. forecast contains list forecast objects, residuals extracted automatically argument needed. However, used NULL. returnall TRUE, list time series corresponding first argument returned, now reconciled. Otherwise, disaggregated series returned. aggregatelist (optional) User-selected list forecast aggregates consider","code":""},{"path":"http://robjhyndman.github.io/thief/reference/reconcilethief.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reconcile temporal hierarchical forecasts — reconcilethief","text":"List reconciled forecasts format forecast. returnall==FALSE, disaggregated series returned.","code":""},{"path":[]},{"path":"http://robjhyndman.github.io/thief/reference/reconcilethief.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reconcile temporal hierarchical forecasts — reconcilethief","text":"Rob J Hyndman","code":""},{"path":"http://robjhyndman.github.io/thief/reference/reconcilethief.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reconcile temporal hierarchical forecasts — reconcilethief","text":"","code":"# Construct aggregates aggts <- tsaggregates(USAccDeaths)  # Compute forecasts fc <- list() for(i in seq_along(aggts))   fc[[i]] <- forecast(auto.arima(aggts[[i]]), h=2*frequency(aggts[[i]]))  # Reconcile forecasts reconciled <- reconcilethief(fc)  # Plot forecasts before and after reconcilation par(mfrow=c(2,3)) for(i in seq_along(fc)) {   plot(reconciled[[i]], main=names(aggts)[i])   lines(fc[[i]]$mean, col='red') }"},{"path":"http://robjhyndman.github.io/thief/reference/thief.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal hierarchical forecasting — thief","title":"Temporal hierarchical forecasting — thief","text":"Takes time series input produces forecasts using temporal hierarchical approach Athanasopoulos et al (2016).","code":""},{"path":"http://robjhyndman.github.io/thief/reference/thief.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal hierarchical forecasting — thief","text":"","code":"thief(y, m = frequency(y), h = m * 2, comb = c(\"struc\", \"mse\", \"ols\",   \"bu\", \"shr\", \"sam\"), usemodel = c(\"ets\", \"arima\", \"theta\", \"naive\",   \"snaive\"), forecastfunction = NULL, aggregatelist = NULL, ...)"},{"path":"http://robjhyndman.github.io/thief/reference/thief.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal hierarchical forecasting — thief","text":"y Time series input m Seasonal period h Forecast horizon comb Combination method temporal hierarchies, taking one following values: \"struc\" Structural scaling - weights temporal hierarchy \"mse\" Variance scaling - weights -sample MSE \"ols\" Unscaled OLS combination weights \"bu\" Bottom-combination -- .e., aggregate forecasts ignored. \"shr\" GLS using shrinkage (block diagonal) estimate residuals \"sam\" GLS using sample covariance matrix residuals usemodel Model used forecasting aggregation level: \"ets\" exponential smoothing, using ets function. \"arima\" arima, using auto.arima function. \"theta\" theta method, using thetaf function. \"naive\" random walk forecasts \"snaive\" seasonal naive forecasts, based last year observed data. forecastfunction User-defined function used instead usemodel. function must take time series first argument, forecast horizon second argument. must return object class forecast. aggregatelist User-selected list forecast aggregates consider ... Arguments passed time series modelling function (ets auto.arima), forecastfunction.","code":""},{"path":"http://robjhyndman.github.io/thief/reference/thief.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporal hierarchical forecasting — thief","text":"forecast object.","code":""},{"path":"http://robjhyndman.github.io/thief/reference/thief.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Temporal hierarchical forecasting — thief","text":"function computes temporal aggregates y using tsaggregates, calculates forecasts using model function specified usemodel forecastfunction, finally reconciles forecasts using reconcilethief. reconciled forecasts y returned.","code":""},{"path":[]},{"path":"http://robjhyndman.github.io/thief/reference/thief.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Temporal hierarchical forecasting — thief","text":"Rob J Hyndman Nikolaos Kourentzes","code":""},{"path":"http://robjhyndman.github.io/thief/reference/thief.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal hierarchical forecasting — thief","text":"","code":"if (FALSE) {  # Select ARIMA models for all series using auto.arima() z <- thief(AEdemand[,12], usemodel='arima') plot(z)  # Use your own function ftbats <- function(y,h,...){forecast(tbats(y),h,...)} z <- thief(AEdemand[,12], forecastfunction=ftbats) plot(z) }"},{"path":"http://robjhyndman.github.io/thief/reference/tsaggregates.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-overlapping temporal aggregation of a time series — tsaggregates","title":"Non-overlapping temporal aggregation of a time series — tsaggregates","text":"Produces temporal aggregations frequencies greater 1","code":""},{"path":"http://robjhyndman.github.io/thief/reference/tsaggregates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-overlapping temporal aggregation of a time series — tsaggregates","text":"","code":"tsaggregates(y, m = frequency(y), align = c(\"end\", \"start\"),   aggregatelist = NULL)"},{"path":"http://robjhyndman.github.io/thief/reference/tsaggregates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-overlapping temporal aggregation of a time series — tsaggregates","text":"y Univariate time series class ts. m Integer seasonal period align Indicates aggregates aligned: either start series end series. forecasting purposes, set end. aggregatelist User-selected list aggregates consider.","code":""},{"path":"http://robjhyndman.github.io/thief/reference/tsaggregates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-overlapping temporal aggregation of a time series — tsaggregates","text":"list time series. first element series `y`, followed series increasing levels aggregation. last element \"annual\" series (.e., series aggregated seasons).","code":""},{"path":[]},{"path":"http://robjhyndman.github.io/thief/reference/tsaggregates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Non-overlapping temporal aggregation of a time series — tsaggregates","text":"Rob J Hyndman","code":""},{"path":"http://robjhyndman.github.io/thief/reference/tsaggregates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-overlapping temporal aggregation of a time series — tsaggregates","text":"","code":"tsaggregates(USAccDeaths) #> $Monthly #>        Jan   Feb   Mar   Apr   May   Jun   Jul   Aug   Sep   Oct   Nov   Dec #> 1973  9007  8106  8928  9137 10017 10826 11317 10744  9713  9938  9161  8927 #> 1974  7750  6981  8038  8422  8714  9512 10120  9823  8743  9129  8710  8680 #> 1975  8162  7306  8124  7870  9387  9556 10093  9620  8285  8466  8160  8034 #> 1976  7717  7461  7767  7925  8623  8945 10078  9179  8037  8488  7874  8647 #> 1977  7792  6957  7726  8106  8890  9299 10625  9302  8314  8850  8265  8796 #> 1978  7836  6892  7791  8192  9115  9434 10484  9827  9110  9070  8633  9240 #>  #> $`2-Monthly` #> Time Series: #> Start = c(1973, 1)  #> End = c(1978, 6)  #> Frequency = 6  #>  [1] 17113 18065 20843 22061 19651 18088 14731 16460 18226 19943 17872 17390 #> [13] 15468 15994 18943 19713 16751 16194 15178 15692 17568 19257 16525 16521 #> [25] 14749 15832 18189 19927 17164 17061 14728 15983 18549 20311 18180 17873 #>  #> $Quarterly #>       Qtr1  Qtr2  Qtr3  Qtr4 #> 1973 26041 29980 31774 28026 #> 1974 22769 26648 28686 26519 #> 1975 23592 26813 27998 24660 #> 1976 22945 25493 27294 25009 #> 1977 22475 26295 28241 25911 #> 1978 22519 26741 29421 26943 #>  #> $`4-Monthly` #> Time Series: #> Start = c(1973, 1)  #> End = c(1978, 3)  #> Frequency = 3  #>  [1] 35178 42904 37739 31191 38169 35262 31462 38656 32945 30870 36825 33046 #> [13] 30581 38116 34225 30711 38860 36053 #>  #> $Biannual #> Time Series: #> Start = c(1973, 1)  #> End = c(1978, 2)  #> Frequency = 2  #>  [1] 56021 59800 49417 55205 50405 52658 48438 52303 48770 54152 49260 56364 #>  #> $Annual #> Time Series: #> Start = 1973  #> End = 1978  #> Frequency = 1  #> [1] 115821 104622 103063 100741 102922 105624 #>  #> attr(,\"class\") #> [1] \"tsaggregates\""}]
